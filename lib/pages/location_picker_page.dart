import 'dart:async';import 'package:easy_debounce/easy_debounce.dart';import 'package:flutter/material.dart';import 'package:geocoding/geocoding.dart';import 'package:get/get.dart';import 'package:google_maps_flutter/google_maps_flutter.dart';import '../components/address_sheet.dart';import '../components/primary_button.dart';import '../request_model/auth_request_model.dart';import '../utils/app_styles.dart';import '../utils/custom_colors.dart';import '../utils/geo_util.dart';import '../view_models/auth_view_model.dart';class LocationPickerPage extends StatefulWidget {  final LocationModel? addressDetail;  const LocationPickerPage({super.key, this.addressDetail});  @override  State<LocationPickerPage> createState() => _LocationPickerPageState();}class _LocationPickerPageState extends State<LocationPickerPage> {  final authViewModel = Get.put(AuthViewModel());  late GoogleMapController mapController;  LatLng? selectedLocation;  bool? isSheetOpen = false;  late LocationModel selectedLocationAddress;  @override  void initState() {    super.initState();    final details = authViewModel.locationDetails.value;    print(details);    if (details != null) {      selectedLocationAddress = details;      setState(() {        selectedLocation = LatLng(            details.latitude  ?? 0.0,            details.latitude ?? 0.0);      });      fetchCurrentLocation();    }  }  @override  Widget build(BuildContext context) {    final currentPosition = authViewModel.locationPosition.value;    LatLng initialCenter = authViewModel.locationDetails.value == null ? LatLng(currentPosition?.latitude ?? 0,currentPosition?.longitude ?? 0.0) : LatLng(authViewModel.locationDetails.value?.latitude ?? 0,authViewModel.locationDetails.value?.longitude ?? 0.0);    return Scaffold(      appBar: AppBar(          backgroundColor: Colors.white,          elevation: 0,          iconTheme: const IconThemeData(color: Colors.black),          centerTitle: true,          automaticallyImplyLeading: true,          title: Text(            'Location',            style: TextStyle(                fontWeight: FontWeight.w600,                fontSize: 20,                color: CustomColors.textColor),          ),          bottom: const PreferredSize(            preferredSize: Size.fromHeight(1.0),            child: Divider(height: 1),          )),      body: SafeArea(        child: Stack(          children: [            Padding(                padding: const EdgeInsets.only(top: 0),                child: GoogleMap(                  initialCameraPosition: CameraPosition(                    target: initialCenter,                    zoom: 18,                  ),                  myLocationEnabled: true,                  onTap: _onMapTapped,                  onCameraMove: _onCameraMove,                  onMapCreated: (controller) {                    mapController = controller;                  },                )),            Center(                child: Image.asset(                  'assets/images/pin.png',                  width: 44,                  height: 44,                  fit: BoxFit.contain,                )),            Positioned(              bottom: 0,              left: 0,              right: 0,              child: Container(                color: Colors.white,                padding: const EdgeInsets.all(12),                child: Center(                  child: FutureBuilder<Placemark?>(                    future: fetchCurrentLocation(),                    builder: (context, snapshot) {                      if (snapshot.connectionState == ConnectionState.waiting) {                        return const CircularProgressIndicator();                      } else if (snapshot.hasError) {                        return Text('Error: ${snapshot.error}',                            style: AppStyles.textError);                      } else if (!snapshot.hasData || snapshot.data == null) {                        // Show a message if no data is available                        return const Text('No address available');                      } else {                        // Display the address in a Text widget                        Placemark placeMark = snapshot.data!;                        print("PlaceMark");                        print(placeMark);                        print(selectedLocationAddress);                        print(selectedLocationAddress.toJson());                        return Column(                          children: [                            Row(                              children: [                                Icon(Icons.location_on_sharp,                                    color: CustomColors.primary),                                const Text(                                  "Selected Location",                                  style: TextStyle(                                    color: Colors.black,                                    fontWeight: FontWeight.w600,                                  ),                                ),                              ],                            ),                            const SizedBox(height: 6),                            Text(                              'Address: ${placeMark.street ?? ''} ${placeMark.subLocality ?? ''}, ${placeMark.locality ?? ''}',                              textAlign: TextAlign.start,                              style: const TextStyle(                                  fontSize: 14, fontWeight: FontWeight.w600),                            ),                            const SizedBox(height: 12),                            Row(                              children: [                                Flexible(                                    child: PrimaryButton(                                        buttonTxt: 'Back',                                        buttonClick: () => Get.back())),                                const SizedBox(width: 20),                                Flexible(                                    child: PrimaryButton(                                        buttonTxt: 'Confirm',                                        buttonClick: () {                                          setState(() {                                            isSheetOpen = true;                                          });                                          _showBottomSheet(context);                                          // addressViewModel                                          //     .setSelectedLocation(                                          //         selectedLocation ??                                          //             const LatLng(0, 0));                                          // Get.offAll(() => const MainPage());                                        }))                              ],                            )                          ],                        );                      }                    },                  ),                ),              ),            ),          ],        ),      ),    );  }  void _onMapTapped(LatLng tappedPoint) {    setState(() {      selectedLocation = tappedPoint;    });  }  void _onCameraMove(CameraPosition position) {    setState(() {      selectedLocation = position.target;    });  }  Future<Placemark?> fetchCurrentLocation() {    print("Location Latitude${selectedLocation?.latitude ?? 0} Longitude${selectedLocation?.longitude ?? 0}");    Completer<Placemark?> completer = Completer<Placemark?>();    EasyDebounce.debounce('deBounce', const Duration(milliseconds: 800), () async {          final placeMark = await GeoUtil().getAddressFromLatLng(selectedLocation?.latitude ?? 0, selectedLocation?.longitude ?? 0);          selectedLocationAddress = LocationModel(address1: '${placeMark?.street ?? ''} ${placeMark?.subLocality ?? ''}, ${placeMark?.locality.toString() ?? ''}',address2:placeMark?.subLocality ?? '',city:placeMark?.locality ?? '',state:placeMark?.administrativeArea ?? '',pinCode: placeMark?.postalCode?.isEmpty == true ? null : int.parse((placeMark?.postalCode ?? '0').toString()),latitude: selectedLocation?.latitude ?? 0.0,longitude:selectedLocation?.longitude ?? 0.0 );          completer.complete(placeMark);        });    return completer.future;  }  void _showBottomSheet(BuildContext context) async {    await showModalBottomSheet(      backgroundColor: Colors.white,      context: context,      isScrollControlled: true,      builder: (BuildContext context) {        return AddressSheet(locationDetails: selectedLocationAddress);      },    );    setState(() {      isSheetOpen = false;    });  }}